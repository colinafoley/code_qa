<?php

/**
 * @file
 * PHPLOC_Result entity code.
 */

/**
 * Implements hook_entity_info().
 */
function git_history_entity_info() {
  return array(
    'git_history' => array(
      'label' => t('Git History'),
      'entity class' => 'GitHistory',
      'controller class' => 'GitHistoryController',
      'base table' => 'git_history',
      'uri callback' => 'git_history_uri',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'prid',
      ),
      'static cache' => TRUE,
    ),
  );
}


/**
 * Access callback for Git History.
 */
function git_history_access($op, $git_history, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer git_history entities', $account)
          || user_access('create git_history entities', $account);
    case 'view':
      return user_access('administer git_history entities', $account)
          || user_access('view git_history entities', $account);
    case 'edit':
      return user_access('administer git_history entities')
          || user_access('edit any git_history entities')
          || (user_access('edit own git_history entities') && ($task->uid == $account->uid));
  }
}


/**
 * Implements hook_permission().
 */
function git_history_permission() {
  $permissions = array(
    'create git_history entities' => array(
      'title' => t('Create git_history'),
      'description' => t('Allows users to create git_history.'),
      'restrict access' => TRUE,
    ),
    'view git_history entities' => array(
      'title' => t('View git_history'),
      'description' => t('Allows users to view git_history.'),
      'restrict access' => TRUE,
    ),
    'edit any git_history entities' => array(
      'title' => t('Edit any git_history'),
      'description' => t('Allows users to edit any git_history.'),
      'restrict access' => TRUE,
    ),
    'edit own git_history entities' => array(
      'title' => t('Edit own git_history'),
      'description' => t('Allows users to edit own git_history.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * GitHistory class.
 */
class GitHistory extends Entity {

  /**
   * The default label.
   *
   * @return int
   *   git_history id
   */
  protected function defaultLabel() {
    return $this->prid;
  }

  /**
   * The default URI.
   *
   * @return array
   *   An array containing the path to the git_history
   */
  protected function defaultUri() {
    return array('path' => 'git_history/' . $this->identifier());
  }
}


/**
 * GitHistoryController class
 */
class GitHistoryController extends EntityAPIController {

  /**
   * Create a git_history.
   *
   * @param array $values
   *   The values of the git_history object to create.
   *
   * @return
   */
  public function create(array $values = array()) {
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('git_history', $entity);
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }
}


/**
 * Load a Git History.
 */
function git_history_load($prid, $reset = FALSE) {
  $git_historys = git_history_load_multiple(array($prid), array(), $reset);
  return reset($git_historys);
}


/**
 * Load multiple Git Historys based on certain conditions.
 */
function git_history_load_multiple($prid = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('git_history', $prid, $conditions, $reset);
}


/**
 * Save Git History.
 */
function git_history_save($git_history) {
  entity_save('git_history', $git_history);
}


/**
 * Delete single Git History.
 */
function git_history_delete($git_history) {
  entity_delete('git_history', entity_id('git_history', $git_history));
}


/**
 * Delete multiple Git Historys.
 */
function git_history_delete_multiple($git_history_ids) {
  entity_delete_multiple('git_history', $git_history_ids);
}
