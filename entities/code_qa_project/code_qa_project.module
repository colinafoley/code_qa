<?php

/**
 * @file
 * Code QA Project entity code.
 */

/**
 * Implements hook_entity_info().
 */
function code_qa_project_entity_info() {
  return array(
    'code_qa_project' => array(
      'label' => t('Code QA Project'),
      'entity class' => 'CodeQAProject',
      'controller class' => 'CodeQAProjectController',
      'base table' => 'code_qa_project',
      'uri callback' => 'code_qa_project_uri',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'pid',
      ),
      'static cache' => TRUE,
    ),
  );
}


/**
 * Access callback for Git History.
 */
function code_qa_project_access($op, $code_qa_project, $account = NULL, $entity_type = NULL) {
  global $user;
  if (!isset($account)) {
    $account = $user;
  }
  switch ($op) {
    case 'create':
      return user_access('administer code_qa_project entities', $account)
          || user_access('create code_qa_project entities', $account);
    case 'view':
      return user_access('administer code_qa_project entities', $account)
          || user_access('view code_qa_project entities', $account);
    case 'edit':
      return user_access('administer code_qa_project entities')
          || user_access('edit any code_qa_project entities')
          || (user_access('edit own code_qa_project entities') && ($task->uid == $account->uid));
  }
}


/**
 * Implements hook_permission().
 */
function code_qa_project_permission() {
  $permissions = array(
    'create code_qa_project entities' => array(
      'title' => t('Create code_qa_project'),
      'description' => t('Allows users to create code_qa_project.'),
      'restrict access' => TRUE,
    ),
    'view code_qa_project entities' => array(
      'title' => t('View code_qa_project'),
      'description' => t('Allows users to view code_qa_project.'),
      'restrict access' => TRUE,
    ),
    'edit any code_qa_project entities' => array(
      'title' => t('Edit any code_qa_project'),
      'description' => t('Allows users to edit any code_qa_project.'),
      'restrict access' => TRUE,
    ),
    'edit own code_qa_project entities' => array(
      'title' => t('Edit own code_qa_project'),
      'description' => t('Allows users to edit own code_qa_project.'),
      'restrict access' => TRUE,
    ),
  );
  return $permissions;
}


/**
 * CodeQAProject class.
 */
class CodeQAProject extends Entity {

  /**
   * The default label.
   *
   * @return int
   *   code_qa_project id
   */
  protected function defaultLabel() {
    return $this->prid;
  }

  /**
   * The default URI.
   *
   * @return array
   *   An array containing the path to the code_qa_project
   */
  protected function defaultUri() {
    return array('path' => 'code_qa_project/' . $this->identifier());
  }
}


/**
 * CodeQAProjectController class
 */
class CodeQAProjectController extends EntityAPIController {

  /**
   * Create a code_qa_project.
   *
   * @param array $values
   *   The values of the code_qa_project object to create.
   *
   * @return
   */
  public function create(array $values = array()) {
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $wrapper = entity_metadata_wrapper('code_qa_project', $entity);
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }
}


/**
 * Load a Git History.
 */
function code_qa_project_load($prid, $reset = FALSE) {
  $code_qa_projects = code_qa_project_load_multiple(array($prid), array(), $reset);
  return reset($code_qa_projects);
}


/**
 * Load multiple Git Historys based on certain conditions.
 */
function code_qa_project_load_multiple($prid = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('code_qa_project', $prid, $conditions, $reset);
}


/**
 * Save Git History.
 */
function code_qa_project_save($code_qa_project) {
  entity_save('code_qa_project', $code_qa_project);
}


/**
 * Delete single Git History.
 */
function code_qa_project_delete($code_qa_project) {
  entity_delete('code_qa_project', entity_id('code_qa_project', $code_qa_project));
}


/**
 * Delete multiple Git Historys.
 */
function code_qa_project_delete_multiple($code_qa_project_ids) {
  entity_delete_multiple('code_qa_project', $code_qa_project_ids);
}
