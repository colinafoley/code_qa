<?php
/**
 * @file
 * code_qa module implementation
 */

module_load_include('inc', 'code_qa', 'code_qa.admin');
module_load_include('inc', 'code_qa', 'code_qa.phploc');

/**
 * Implements hook_menu().
 */
function code_qa_menu() {
  $items = array();

  $items['admin/code_qa'] = array(
    'title' => 'Code QA',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('code_qa_admin_page'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/code_qa/phploc'] = array(
    'title' => 'Code QA: PHPLOC',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('code_qa_phploc_report_page'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/code_qa/phploc/%'] = array(
    'title' => 'Code QA: PHPLOC Details',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('code_qa_phploc_report_module_page', 3),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function code_qa_get_projects($header = NULL) {
  $query = db_select('code_qa_project', 'p')
    ->fields('p',
      array(
        'pid',
        'name',
        'url',
      )
    )
    ->extend('TableSort');

  if($header) {
    $query->orderByHeader($header);
  }
  $result = $query->execute();

  return $result;
}


function code_qa_get_filepath() {
  // TODO

  $path = '/tmp/code_qa';

  return $path;
}


function code_qa_execute_git($repo_path, $command, $parameters = array()) {

  $full_command = 'git'
    . ' --git-dir=' . $repo_path
    . '/.git --work-tree=' . $repo_path
    . ' ' . $command . ' ' . implode(' ', $parameters);

  exec($full_command, $output);

  return $output;
}

function code_qa_process_git_revisions($git_log) {
  $numLines  = count($git_log);
  $revisions = array();

  for ($i = 0; $i < $numLines; $i++) {
      $tmp = explode(' ', $git_log[$i]);

      if (count($tmp) == 2 && $tmp[0] == 'commit') {
          $sha1 = $tmp[1];
      } elseif (count($tmp) == 4 && $tmp[0] == 'Author:') {
          $author = join(' ', array_slice($tmp, 1));
      } elseif (count($tmp) == 9 && $tmp[0] == 'Date:') {
          $revisions[] = array(
            'author'  => $author,
            'date'    => \DateTime::createFromFormat(
                'D M j H:i:s Y O',
                join(' ', array_slice($tmp, 3))
            ),
            'sha1'    => $sha1,
            'message' => isset($git_log[$i+2]) ? trim($git_log[$i+2]) : ''
          );
      }
  }

  return $revisions;
}
